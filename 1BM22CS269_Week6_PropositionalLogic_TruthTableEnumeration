#Define a function to print the truth table and check KB |= Î± for all cases
def truth_table_entailment():
    # Header for the table with adjusted column widths
    print(f"{'A':<7}{'B':<7}{'C':<7}{'A or C':<12}{'B or not C':<15}{'KB':<8}{'alpha':<10}")
    print("-" * 65)

    # Variable to track if KB entails alpha in all cases
    all_entail = True

    # Iterate through all possible truth values of A, B, and C
    for A in [False, True]:
        for B in [False, True]:
            for C in [False, True]:
                # Calculate individual components
                A_or_C = A or C                   # A or C
                B_or_not_C = B or (not C)         # B or not C
                KB = A_or_C and B_or_not_C        # KB = (A or C) and (B or not C)
                alpha = A or B                    # alpha = A or B
                
                # Determine if KB entails alpha for this row
                kb_entails_alpha = (not KB) or alpha  # True if KB implies alpha
                
                # If in any row KB does not entail alpha, set flag to False
                if not kb_entails_alpha:
                    all_entail = False
                
                # Print the results for this row
                print(f"{str(A):<7}{str(B):<7}{str(C):<7}{str(A_or_C):<12}{str(B_or_not_C):<15}{str(KB):<8}{str(alpha):<10}")

    # Final result based on all rows
    if all_entail:
        print("\nKB entails alpha for all cases.")
    else:
        print("\nKB does not entail alpha for all cases.")

# Run the function to display the truth table and final result
truth_table_entailment()
